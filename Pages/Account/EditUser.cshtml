@page "{id}"
@model EditUserModel

<div>
    <div class="bg-gray-50 shadow-lg border border-sm">
        <div class="p-2 text-center text-xl bg-gray-100 rounded-sm shadow-sm">
            <h1>Edit Profile</h1>
        </div>
        <div class="p-2">
            <form method="post">
                <div asp-validation-summary="All" class="text-red-500"></div>
                <div class="mb-5">
                    <div>
                        <label asp-for="Id"></label>
                    </div>
                    <div>
                        <input name="Id" value="@Model.Id" class="text-black rounded-md w-full border border-indigo-100 p-1 focus:border-transparent focus:outline-none focus:ring-2 focus:ring-blue-200">
                        <input name="Id" type="hidden" value="@Model.Id" />
                    </div>
                </div>
                <div class="mb-5">
                    <div>
                        <label asp-for="UserName"></label>
                    </div>
                    <div>
                        <input name="UserName" value="@Model.UserName" class="text-black rounded-md w-full border border-indigo-100 p-1 focus:border-transparent focus:outline-none focus:ring-2 focus:ring-blue-200">
                    </div>
                </div>
                <div class="mb-5">
                    <div>
                        <label asp-for="Email"></label>
                    </div>
                    <div>
                        <input type="email" name="Email" value="@Model.Email" class="text-black rounded-md w-full border border-indigo-100 p-1 focus:border-transparent focus:outline-none focus:ring-2 focus:ring-blue-200">
                    </div>
                </div>
                <div class="mb-5">
                    <div>
                        <label asp-for="Password"></label>
                    </div>
                    <div>
                        <input type="password" name="Password" value="@Model.Password" class="text-black rounded-md w-full border border-indigo-100 p-1 focus:border-transparent focus:outline-none focus:ring-2 focus:ring-blue-200">
                    </div>
                </div>
                <div class="bg-yellow-200 hover:bg-yellow-300  p-2 -m-2 mt-2 rounded-b-sm">
                    <button type="submit" class="w-full font-bold">Edit Profile</button>
                </div>
            </form>
        </div>
    </div>
    <div class="mt-5 bg-gray-200 border border-gray-300 rounded-lg shadow-lg  mb-10 flex justify-between">
        <a asp-page="userDetails" class="text-center w-full p-2 hover:bg-gray-100">Back</a>
    </div>
</div>

@functions {
    public class EditUserModel: UserPageModel
    {
        // Field Entities
        public UserManager<IdentityUser> UserManager;

        [BindProperty]
        [Required]
        public string Id {get; set;}

        [BindProperty]
        [Required]
        [Display(Name="User Name")]
        public string UserName {get; set;}


        [BindProperty]
        [Required]
        [EmailAddress]
        public string Email {get; set;}


        [BindProperty]
        [Display(Name="New Password")]
        public string Password {get; set;}


        // Constructor
        public EditUserModel (UserManager<IdentityUser> userManager)
        {
            UserManager = userManager;
        }

        // Methods
        private bool IsOwner(string userId) => userId == UserManager.GetUserId(User);
        public async Task<IActionResult> OnGetAsync(string id)
        {
            if (!IsOwner(id))
            {
                return RedirectToPage("/Error/Error404");
            }

            IdentityUser user = await UserManager.FindByIdAsync(id);
            Id = user.Id;
            UserName = user.UserName;
            Email = user.Email;

            return Page();
        }
        public async Task<IActionResult> OnPostAsync()
        {
            if (!IsOwner(Id))
            {
                return RedirectToPage("/Error/Error404");
            }
            
            if (ModelState.IsValid)
            {
                IdentityUser user = await UserManager.FindByIdAsync(Id);
                user.UserName = UserName;
                user.Email = Email;

                IdentityResult result = await UserManager.UpdateAsync(user);
                if (result.Succeeded && !String.IsNullOrEmpty(Password))
                {
                    await UserManager.RemovePasswordAsync(user);
                    result = await UserManager.AddPasswordAsync(user, Password);
                }
                if (result.Succeeded)
                {
                    return RedirectToPage("AdminUserList");
                }
                foreach (IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
            }
            return Page();
        }

    }
}