@page "{id}"
@model AdminEditRoleModel

<div>
    <div class="p-2 text-center text-2xl font-bold my-2 bg-gray-100 rounded-sm shadow-sm">
        <h1>Administration</h1>
    </div>
</div>
<div>
    <div class="bg-gray-50 shadow-lg border border-sm">
        <div class="p-2 text-center text-xl bg-gray-100 rounded-sm shadow-sm">
            <h1>Edit Role: @Model.Role.Name</h1>
        </div>
        <div class="p-2">
            <form method="post">
                <input type="hidden" name="rolename" value="@Model.Role.Name"
                <div asp-validation-summary="All" class="text-red-500"></div>
                <div class="bg-gray-50 shadow-lg border border-sm">
                    <div class="p-2 text-center text-xl bg-gray-100 rounded-sm shadow-sm">
                        <h1>@Model.Role.Name Members</h1>
                    </div>
                    <table class="border-separate table-auto w-full whitespace-no-wrap">
                        <thead>
                            <th>User</th>
                            <th>Email</th>
                            <th></th>
                        </thead>
                        <tbody class="bg-white text-center">
                            @if ((await Model.Members()).Count() == 0)
                            {
                                <td colspans="3" class="text-center">No Members</td>
                            }
                            else
                            {
                                @foreach (IdentityUser u in await Model.Members())
                                {
                                    <td><a asp-page="AdminViewUser" asp-route-id="@u.Id" class="underline hover:bg-gray-50 w-full block">@u.UserName</a></td>
                                    <td class="">@u.Email</td>
                                    <td><button asp-route-userid="@u.Id" type="submit" class="">Change</button></td>                
                                }
                            }
                        </tbody>
                    </table>
                    <div class="p-2 text-center text-xl bg-gray-100 rounded-sm shadow-sm">
                        <h1>@Model.Role.Name Non-Members</h1>
                    </div>
                    <table class="border-separate table-auto w-full whitespace-no-wrap">
                        <thead>
                            <th>User</th>
                            <th>Email</th>
                            <th></th>
                        </thead>
                        <tbody class="bg-white text-center">
                            @if ((await Model.NonMembers()).Count() == 0)
                            {
                                <td colspans="3" class="text-center">No Non-Members</td>
                            }
                            else
                            {
                                @foreach (IdentityUser u in await Model.NonMembers())
                                {
                                    <td><a asp-page="AdminViewUser" asp-route-id="@u.Id" class="underline hover:bg-gray-50 w-full block">@u.UserName</a></td>
                                    <td class="">@u.Email</td>
                                    <td><button asp-route-userid="@u.Id" type="submit" class="">Change</button></td>                
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </form>
        </div>
    </div>
    <div class="mt-5 bg-gray-200 border border-gray-300 rounded-lg shadow-lg  mb-10 flex justify-between">
            <a asp-page="AdminRoleList" class="text-center w-full p-2 hover:bg-gray-300">Back To Role List</a>
    </div>
</div>


@functions {
    public class AdminEditRoleModel: AdminPageModel
    {
        public UserManager<IdentityUser> UserManager;
        public RoleManager<IdentityRole> RoleManager;
        public IdentityRole Role {get; set;}

        public AdminEditRoleModel (UserManager<IdentityUser> userManager, RoleManager<IdentityRole> roleManager)
        {
            UserManager = userManager;
            RoleManager = roleManager;
        }

        public Task<IList<IdentityUser>> Members() => UserManager.GetUsersInRoleAsync(Role.Name);
        public async Task<IEnumerable<IdentityUser>> NonMembers() => UserManager.Users.ToList().Except(await Members());
        public async Task OnGetAsync(string id)
        {
            Role = await RoleManager.FindByIdAsync(id);
        }

        public async Task<IActionResult> OnPostAsync(string userid, string roleName)
        {
            Role = await RoleManager.FindByNameAsync(roleName);
            IdentityUser user = await UserManager.FindByIdAsync(userid);
            IdentityResult result;
            if (await UserManager.IsInRoleAsync(user, roleName))
            {
                result = await UserManager.RemoveFromRoleAsync(user, roleName);
            }
            else
            {
                result = await UserManager.AddToRoleAsync(user, roleName);
            }
            if (result.Succeeded)
            {
                return RedirectToPage();
            }
            else
            {
                foreach (IdentityError err in result.Errors)
                {
                    ModelState.AddModelError("", err.Description);
                }
                return Page();
            }
        }
        
    }
}